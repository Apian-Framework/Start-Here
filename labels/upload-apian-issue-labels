#!/bin/bash

# This script uploads passed-in json issue label data  json string - from the Apian "Start-Here" and apllies it to the
# provided repository.
#
# It's not really used anymore ( see "fetch-apian-issue-labels" and "update-apian-issue-labels")

# This script uses the GitHub Labels REST API
# https://developer.github.com/v3/issues/labels/

# Provide a personal access token that can
# access the source and target repositories.
# This is how you authorize with the GitHub API.
# https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line
GH_TOKEN=$1

# https://douglascayers.com/2019/08/01/how-to-export-and-import-github-issue-labels-between-projects

# The Github organization or repo-owner
SRC_GH_USER=Apian-Framework

# The target repository to add or update labels.
TGT_GH_USER=Apian-Framework
TGT_GH_REPO=$2

JSON_FILE=$3

# ---------------------------------------------------------

if [[ "$1" == "" || "$2" == "" || "$3" == "" ]]
then
    echo "usage: $0 <github-access-token> <apian-repository-name> <JSON data file>"
    exit
fi

if [[ $(command -v jq) == "" ]]
then
  echo "Error: jq is not installed.  'sudo apt-get install jq'"
  exit
fi


# ---------------------------------------------------------

# Headers used in curl commands
GH_ACCEPT_HEADER="Accept: application/vnd.github.symmetra-preview+json"
GH_AUTH_HEADER="Authorization: Bearer $GH_TOKEN"

# Bash for-loop over JSON array with jq
# https://starkandwayne.com/blog/bash-for-loop-over-json-array-using-jq/

# remove the leding hashes from the hex color values
colorsStrippedOfHashes=$( cat $JSON_FILE | jq '[.[] | { "name": .name, "color": (.color|ltrimstr("#")), "description": .description }]' )

sourceLabelsJson64=$( echo $colorsStrippedOfHashes | jq -r '.[] | @base64' )

# for each label from source repo,
# invoke github api to create or update
# the label in the target repo
for sourceLabelJson64 in $sourceLabelsJson64; do

    # base64 decode the json
    sourceLabelJson=$(echo ${sourceLabelJson64} | base64 --decode | jq -r '.')

    # try to create the label
    # POST /repos/:owner/:repo/labels { name, color, description }
    # https://developer.github.com/v3/issues/labels/#create-a-label
    createLabelResponse=$(echo $sourceLabelJson | curl --silent -X POST -d @- -H "$GH_ACCEPT_HEADER" -H "$GH_AUTH_HEADER" https://api.github.com/repos/${TGT_GH_USER}/${TGT_GH_REPO}/labels)
    #echo $createLabelResponse

    # if there's an error then there will be a "message" field
    errMsg=$(echo $createLabelResponse | jq -r '.message')
    if [ "$errMsg" == "Not Found" ]
    then
        echo "Error: Apian repository $TGT_GH_REPO not found"
        exit
    fi

    # if creation failed then the response doesn't include an id and jq returns 'null'
    # Actually, in this case errmsg is "Validation failed" with an "already_exists" error subfield
    # TODO: make this better
    createdLabelId=$(echo $createLabelResponse | jq -r '.id')

    # if label wasn't created maybe it's because it already exists, try to update it
    if [ "$createdLabelId" == "null" ]
    then
        updateLabelResponse=$(echo $sourceLabelJson | curl --silent -X PATCH -d @- -H "$GH_ACCEPT_HEADER" -H "$GH_AUTH_HEADER" https://api.github.com/repos/${TGT_GH_USER}/${TGT_GH_REPO}/labels/$(echo $sourceLabelJson | jq -r '.name | @uri'))
        #echo "Update label response:\n"$updateLabelResponse"\n"
        echo "Updated label: $(echo $updateLabelResponse | jq '.name')"
    else
        #echo "Create label response:\n"$createLabelResponse"\n"
        echo "Created label: $(echo $createLabelResponse | jq '.name')"
    fi

done